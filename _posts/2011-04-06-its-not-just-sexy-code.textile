---
layout: post
title: It's Not Just "Sexy Code"
tags: ruby design software
---
h1. It's Not Just "Sexy Code"

When it comes to crafting code, I'm about asthetics.  Code should be pleasing to the eye and easy to read.  My boss dismisses it as just "sexy code", but I think there's more to it.  It expresses more with less.  There's a focus on clarity.  It reads like verse.  Being terse and well structured means readable.  And this, in turn, means maintainable.

I'm constantly surprised how little attention other programmers pay to this.  If the code addresses the ticket, it's done.  There's very little consideration for its future.  That code may not have dreams of attending an ivy league school, but it has a future.  And if you're thinking about it, you'll be less likely to let it settle for living in the ghetto.

I contract at a VB.NET shop.  On the side I do Ruby.  Ruby has shaped my thinking.  I love the philosophy that code should be beautiful and that coding should promote programmer happiness.  I often try to bring Ruby ideas to our .NET world.  In our shop, I'm sort of a black sheep.  I'm the guy bucking the system with new ways of doing things.  I'm the guy writing extension methods and helper classes in an attempt to make code more expressive with fewer keystrokes.  Code craftsmanship isn't a concern.  Churning tickets is.  Creativity, for the most part, can be left at the door.

I can't understand how some programmers fail to make the connection that beauty does more than evoke emotion.  It makes things more functional.  And because beauty makes a thing more enjoyable to use, a beautiful thing gets more use.  When we work with beautiful things that have beautiful designs it feels less like work.  It promotes happiness.  Chores become fun.

When working within a body code I notice the details.  Is it expressive?  Well structured?  Verbose?  I can't help but notice my surroundings and be bugged if things are not in good order.  I can't help when I'm already in a room fixing a broken light switch not to also repair the squeaky door hinge.  I want the room to be a nice place to visit if ever I have to pass that way again.  For me, it's leaving things better than I found them.  This means I go beyond the bounds of a ticket.  When I spot code smells, I find the urge to clean things up irresistable.  I'm passionate about improving code if it can be improved.  I think passionate programmers are more likely to be craftsmen, to pay attention to the elegance, not only of a design, but also to even a single line of code.  

I'm of the mind that the business domain should shape most everything from native classes to the language itself.  In the long run, most every large project should progress toward becoming a framework.  It's bound to.  In any business domain, patterns will emerge and when they do they should be extracted for reuse.  I often address this by working out a DSL or an API.  I don't care only that you can ask an object to do something, I also care about the manner of the asking.

When it comes right down to it, extend the core classes if you must.  Write those convenience methods.  Effectually, your framework should cater to beautifully expressing the patterns and concepts most prevalent in the domain.  Some designs are shaped by the idea that extending native classes is dangerous.  (That's how jQuery differs from Prototype.)  I prefer to bend a class to whatever shape I see fit.  I understand the risks.  I just prefer that my objects do what I ask them to do.  And I want to ask them directly.  I don't wanna have to instantiate some visitor or decorator or wrapper.  If its a dog, I'm gonna teach it to roll over.  I'm not having someone else roll the dog over.  Objects that can do for themselves are things of beauty.  And they read nicer.

Matz created Ruby to satisfy his idea of beauty.  I also have my own idea of beauty.  While I'm not about to create my own language, I don't have a problem taking a language and bending it to satisfy my personal sense of beauty.  In doing so I think the result is usually more durable, useful, and maintainable, not just "sexy".
